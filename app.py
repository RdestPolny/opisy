import streamlit as st
import pandas as pd
import requests
from bs4 import BeautifulSoup as bs
import time
from openai import OpenAI
import json
import re
from concurrent.futures import ThreadPoolExecutor, as_completed
from typing import Dict, List, Optional, Tuple

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# KONFIGURACJA STRONY
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

st.set_page_config(
    page_title="Generator Opis√≥w Produkt√≥w v2.0",
    page_icon="üìö",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# FUNKCJE POMOCNICZE
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def strip_code_fences(text: str) -> str:
    """Usuwa markdown code fences z odpowiedzi AI"""
    if not text:
        return text
    m = re.match(r"^\s*```(?:html|HTML)?\s*([\s\S]*?)\s*```\s*$", text)
    if m:
        return m.group(1).strip()
    text = re.sub(r"^\s*```(?:html|HTML)?\s*", "", text)
    text = re.sub(r"\s*```\s*$", "", text)
    return text.strip()

def clean_ai_fingerprints(text: str) -> str:
    """Usuwa 'odciski palca AI' - em dash, en dash, etc."""
    text = text.replace('‚Äî', '-')  # Em dash
    text = text.replace('‚Äì', '-')  # En dash
    text = text.replace('‚Ä¶', '...')  # Wielokropek
    return text

def format_product_title(title: str, max_length: int = 60) -> str:
    """Formatuje tytu≈Ç produktu dla lepszej czytelno≈õci"""
    if len(title) > max_length:
        return title[:max_length-3] + "..."
    return title

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# AKENEO API - ROZSZERZONE FUNKCJE
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def _akeneo_root():
    """Zwraca root URL Akeneo"""
    base = st.secrets["AKENEO_BASE_URL"].rstrip("/")
    if base.endswith("/api/rest/v1"):
        return base[:-len("/api/rest/v1")]
    return base

def akeneo_get_token() -> str:
    """Pobiera access token dla Akeneo API"""
    token_url = _akeneo_root() + "/api/oauth/v1/token"
    auth = (st.secrets["AKENEO_CLIENT_ID"], st.secrets["AKENEO_SECRET"])
    data = {
        "grant_type": "password",
        "username": st.secrets["AKENEO_USERNAME"],
        "password": st.secrets["AKENEO_PASSWORD"],
    }
    r = requests.post(token_url, auth=auth, data=data, timeout=30)
    r.raise_for_status()
    return r.json()["access_token"]

def akeneo_get_attribute(code: str, token: str) -> Dict:
    """Pobiera definicjƒô atrybutu z Akeneo"""
    url = _akeneo_root() + f"/api/rest/v1/attributes/{code}"
    r = requests.get(url, headers={"Authorization": f"Bearer {token}"}, timeout=30)
    r.raise_for_status()
    return r.json()

def akeneo_product_exists(sku: str, token: str) -> bool:
    """Sprawdza czy produkt istnieje w Akeneo"""
    url = _akeneo_root() + f"/api/rest/v1/products/{sku}"
    r = requests.get(url, headers={"Authorization": f"Bearer {token}"}, timeout=30)
    if r.status_code == 200:
        return True
    if r.status_code == 404:
        return False
    r.raise_for_status()

def akeneo_search_products(search_query: str, token: str, limit: int = 20) -> List[Dict]:
    """
    Wyszukuje produkty w Akeneo po nazwie/tytule
    
    Args:
        search_query: Fraza do wyszukania
        token: Access token Akeneo
        limit: Maksymalna liczba wynik√≥w
        
    Returns:
        Lista produkt√≥w z podstawowymi danymi
    """
    url = _akeneo_root() + "/api/rest/v1/products"
    headers = {"Authorization": f"Bearer {token}"}
    
    # Szukamy w r√≥≈ºnych mo≈ºliwych atrybutach nazwy
    # Dostosuj do swoich atrybut√≥w (name, title, product_name, etc.)
    params = {
        "limit": limit,
        "search": json.dumps({
            "identifier": [{"operator": "CONTAINS", "value": search_query}]
        })
    }
    
    try:
        r = requests.get(url, headers=headers, params=params, timeout=30)
        r.raise_for_status()
        data = r.json()
        
        products = []
        for item in data.get("_embedded", {}).get("items", []):
            # Pr√≥bujemy znale≈∫ƒá tytu≈Ç produktu
            title = item.get("identifier", "")
            
            # Szukamy w values r√≥≈ºnych mo≈ºliwych atrybut√≥w z nazwƒÖ
            values = item.get("values", {})
            for attr_name in ["name", "title", "product_name", "nazwa"]:
                if attr_name in values:
                    attr_values = values[attr_name]
                    if attr_values and len(attr_values) > 0:
                        title = attr_values[0].get("data", title)
                        break
            
            products.append({
                "identifier": item.get("identifier", ""),
                "title": title,
                "family": item.get("family", ""),
                "enabled": item.get("enabled", False),
                "raw_data": item
            })
        
        return products
    except Exception as e:
        st.error(f"B≈ÇƒÖd wyszukiwania w Akeneo: {str(e)}")
        return []

def akeneo_get_product_details(sku: str, token: str, channel: str = "Bookland", locale: str = "pl_PL") -> Optional[Dict]:
    """
    Pobiera pe≈Çne dane produktu z Akeneo
    
    Args:
        sku: Identyfikator produktu
        token: Access token
        channel: Kana≈Ç (scope)
        locale: Locale
        
    Returns:
        Dict z danymi produktu lub None
    """
    url = _akeneo_root() + f"/api/rest/v1/products/{sku}"
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        r = requests.get(url, headers=headers, timeout=30)
        r.raise_for_status()
        product = r.json()
        
        # Ekstrakcja warto≈õci atrybut√≥w
        values = product.get("values", {})
        
        def get_value(attr_name: str) -> str:
            """Pomocnicza funkcja do ekstrakcji warto≈õci atrybutu"""
            if attr_name not in values:
                return ""
            
            attr_values = values[attr_name]
            if not attr_values:
                return ""
            
            # Szukamy warto≈õci dla odpowiedniego scope i locale
            for val in attr_values:
                val_scope = val.get("scope")
                val_locale = val.get("locale")
                
                # Je≈õli attr nie jest scopable/localizable, mo≈ºe mieƒá None
                if (val_scope is None or val_scope == channel) and \
                   (val_locale is None or val_locale == locale):
                    return val.get("data", "")
            
            # Fallback - pierwsza warto≈õƒá
            return attr_values[0].get("data", "")
        
        # Budujemy strukturƒô z danymi
        product_data = {
            "identifier": product.get("identifier", ""),
            "family": product.get("family", ""),
            "enabled": product.get("enabled", False),
            "title": get_value("name") or get_value("title") or get_value("product_name") or product.get("identifier", ""),
            "description": get_value("description"),
            "short_description": get_value("short_description"),
            "ean": get_value("ean"),
            "isbn": get_value("isbn"),
            "author": get_value("author") or get_value("autor"),
            "publisher": get_value("publisher") or get_value("wydawnictwo"),
            "year": get_value("year") or get_value("rok_wydania"),
            "pages": get_value("pages") or get_value("liczba_stron"),
            "cover_type": get_value("cover_type") or get_value("oprawa"),
            "dimensions": get_value("dimensions") or get_value("wymiary"),
            "age": get_value("age") or get_value("wiek"),
            "category": get_value("category") or get_value("kategoria"),
            "raw_values": values
        }
        
        return product_data
        
    except requests.exceptions.HTTPError as e:
        if e.response.status_code == 404:
            return None
        raise e

def akeneo_update_description(sku: str, html_description: str, channel: str, locale: str = "pl_PL") -> bool:
    """Aktualizuje opis produktu w Akeneo"""
    token = akeneo_get_token()
    if not akeneo_product_exists(sku, token):
        raise ValueError(f"Produkt o SKU '{sku}' nie istnieje w Akeneo.")
    
    # Sprawd≈∫ konfiguracjƒô atrybutu description
    attr_desc = akeneo_get_attribute("description", token)
    is_scopable_desc = bool(attr_desc.get("scopable", False))
    is_localizable_desc = bool(attr_desc.get("localizable", False))
    
    value_obj_desc = {
        "data": html_description,
        "scope": channel if is_scopable_desc else None,
        "locale": locale if is_localizable_desc else None,
    }
    
    payload_values = {"description": [value_obj_desc]}

    # Spr√≥buj zaktualizowaƒá opisy_seo je≈õli istnieje
    try:
        attr_seo = akeneo_get_attribute("opisy_seo", token)
        is_scopable_seo = bool(attr_seo.get("scopable", False))
        is_localizable_seo = bool(attr_seo.get("localizable", False))
        
        value_obj_seo = {
            "data": True,
            "scope": channel if is_scopable_seo else None,
            "locale": locale if is_localizable_seo else None,
        }
        payload_values["opisy_seo"] = [value_obj_seo]
    except requests.exceptions.HTTPError as e:
        if e.response.status_code == 404:
            st.warning("‚ö†Ô∏è Atrybut 'opisy_seo' nie istnieje. Aktualizujƒô tylko opis g≈Ç√≥wny.")
        else:
            raise e

    url = _akeneo_root() + f"/api/rest/v1/products/{sku}"
    payload = {"values": payload_values}
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json",
        "Accept": "application/json",
    }
    
    r = requests.patch(url, headers=headers, data=json.dumps(payload), timeout=30)
    
    if r.status_code in (200, 204):
        return True
    try:
        detail = r.json()
    except Exception:
        detail = r.text
    raise RuntimeError(f"Akeneo zwr√≥ci≈Ço {r.status_code}: {detail}")

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# WEB SCRAPING
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def get_book_data(url: str) -> Dict:
    """
    Pobiera dane produktu ze strony zewnƒôtrznej (scraping)
    """
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept-Language': 'pl-PL,pl;q=0.9,en-US;q=0.8,en;q=0.7',
    }
    
    try:
        response = requests.get(url, headers=headers, timeout=30)
        response.raise_for_status()
        soup = bs(response.text, 'html.parser')

        title_tag = soup.find('h1')
        title = title_tag.get_text(strip=True) if title_tag else ''

        details_text = ""
        description_text = ""

        # Parsowanie dla smyk.com
        if 'smyk.com' in url:
            smyk_desc_div = soup.find("div", attrs={"data-testid": "box-attributes__simple"})
            if smyk_desc_div:
                for p_tag in smyk_desc_div.find_all("p"):
                    if p_tag.find("span", string=re.compile(r"Nr produktu:")):
                        p_tag.decompose()
                description_text = smyk_desc_div.get_text(separator="\n", strip=True)

            smyk_attributes_div = soup.find("div", class_="box-attributes__not-simple")
            if smyk_attributes_div:
                attributes_list = []
                items = smyk_attributes_div.find_all("div", class_="box_attributes__spec-item")
                for item in items:
                    label_tag = item.find("span", class_="box-attributes-list__label--L")
                    value_tag = item.find("span", class_="box-attributes-list__atribute--L")
                    if label_tag and value_tag:
                        label = label_tag.get_text(strip=True)
                        value = value_tag.get_text(strip=True)
                        if label and value:
                            attributes_list.append(f"{label}: {value}")
                
                if attributes_list:
                    details_text = "\n".join(attributes_list)
        
        # Parsowanie og√≥lne
        if not description_text:
            details_div = soup.find("div", id="szczegoly") or soup.find("div", class_="product-features")
            if details_div:
                ul = details_div.find("ul", class_="bullet") or details_div.find("ul")
                if ul:
                    li_elements = ul.find_all("li")
                    details_list = [li.get_text(separator=" ", strip=True) for li in li_elements]
                    details_text = "\n".join(details_list)
            
            description_div = soup.find("div", class_="desc-container")
            if description_div:
                article = description_div.find("article")
                if article:
                    nested_article = article.find("article")
                    if nested_article:
                        description_text = nested_article.get_text(separator="\n", strip=True)
                    else:
                        description_text = article.get_text(separator="\n", strip=True)
                else:
                    description_text = description_div.get_text(separator="\n", strip=True)

        if not description_text:
            alt_desc_div = soup.find("div", id="product-description")
            if alt_desc_div:
                description_text = alt_desc_div.get_text(separator="\n", strip=True)

        description_text = " ".join(description_text.split())

        if not description_text and not details_text:
            return {
                'title': title,
                'details': '',
                'description': '',
                'error': "Nie uda≈Ço siƒô pobraƒá opisu ani szczeg√≥≈Ç√≥w produktu."
            }
            
        return {
            'title': title,
            'details': details_text,
            'description': description_text,
            'error': None
        }
        
    except Exception as e:
        return {
            'title': '',
            'details': '',
            'description': '',
            'error': f"B≈ÇƒÖd pobierania: {str(e)}"
        }

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# GENEROWANIE OPIS√ìW - GPT-5-NANO
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def generate_description(product_data: Dict, client: OpenAI, style_variant: str = "default") -> str:
    """
    Generuje opis produktu z wykorzystaniem GPT-5-nano
    
    Args:
        product_data: S≈Çownik z danymi produktu (title, details, description)
        client: Klient OpenAI
        style_variant: Wariant stylistyczny
        
    Returns:
        HTML opis produktu
    """
    try:
        system_prompt = """Jeste≈õ EKSPERTEM copywritingu e-commerce i SEO. Twoje opisy sƒÖ anga≈ºujƒÖce, semantycznie zoptymalizowane i konwertujƒÖ odwiedzajƒÖcych w kupujƒÖcych.

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  KROK 1: WEWNƒòTRZNA ANALIZA PRODUKTU (NIE WYPISUJ TEJ CZƒò≈öCI)     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

Przeanalizuj dane produktu i zidentyfikuj:
- Typ produktu (ksiƒÖ≈ºka/gra/zabawka/edukacja)
- Grupƒô docelowƒÖ (dzieci/m≈Çodzie≈º/doro≈õli/profesjonali≈õci)
- Kluczowe korzy≈õci i USP (Unique Selling Points)
- G≈Ç√≥wne s≈Çowa kluczowe SEO do wplecenia naturalnie

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  KROK 2: GENEROWANIE OPISU - STRUKTURA HTML                       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

OBOWIƒÑZKOWA STRUKTURA (bez odstƒôpstw!):

1. <h2>[Chwytliwy nag≈Ç√≥wek z g≈Ç√≥wnym s≈Çowem kluczowym]</h2>
   
2. <p>[Akapit wprowadzajƒÖcy - emocjonalne otwarcie, 2-3 zdania, BEZ danych technicznych]</p>

3. <h2>[Nag≈Ç√≥wek sekcji g≈Ç√≥wnej]</h2>

4. <p>[G≈Ç√≥wna tre≈õƒá z korzy≈õciami i funkcjami - 3-4 zdania]</p>

5. <h2>[Nag≈Ç√≥wek drugiej sekcji]</h2>

6. <p>[Rozwiniƒôcie, szczeg√≥≈Çy - 3-4 zdania, TUTAJ wpleƒá dane techniczne naturalnie]</p>

7. <h3>[Wezwanie do dzia≈Çania / Podsumowanie]</h3>

8. <p>[Zachƒôta do zakupu - 1-2 zdania]</p>

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  KRYTYCZNE ZASADY (BEZWZGLƒòDNIE PRZESTRZEGAJ!)                    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

1. JƒòZYK I INTERPUNKCJA:
   ‚úÖ ZAWSZE u≈ºywaj standardowego my≈õlnika "-" (minus)
   ‚ùå NIGDY nie u≈ºywaj em dash "‚Äî" ani en dash "‚Äì"
   ‚ùå NIGDY nie u≈ºywaj wielokropka "‚Ä¶" - u≈ºywaj trzech kropek "..."
   ‚úÖ Nienaganna polska gramatyka i ortografia

2. BOLDOWANIE (KLUCZOWE!):
   ‚úÖ Pogrubiaj 6-10 kluczowych fraz w ca≈Çym opisie
   ‚úÖ Bold: pojedyncze s≈Çowa LUB frazy 2-4 s≈Çowa
   ‚úÖ Bold: nazwy produkt√≥w, kategorie, korzy≈õci
   ‚úÖ Przyk≈Çady: <b>ksiƒÖ≈ºka edukacyjna</b>, <b>rozw√≥j dziecka</b>, <b>ilustracje</b>
   ‚ùå NIGDY nie pogrubiaj ca≈Çych zda≈Ñ ani fraz d≈Çu≈ºszych ni≈º 4 s≈Çowa
   ‚úÖ Rozmie≈õƒá bold r√≥wnomiernie przez ca≈Çy opis

3. NAG≈Å√ìWKI:
   ‚úÖ H2 na poczƒÖtku ZAWSZE - chwytliwy, z g≈Ç√≥wnym s≈Çowem kluczowym
   ‚úÖ Minimum 2x <h2> i 1x <h3> w opisie
   ‚úÖ Nag≈Ç√≥wki konkretne, opisowe (nie og√≥lne jak "O produkcie")
   ‚úÖ Przyk≈Çady dobrych H2: "FascynujƒÖca przygoda w krainie fantasy", "Edukacyjna zabawa dla ma≈Çych odkrywc√≥w"

4. TRE≈öƒÜ I STRUKTURA:
   ‚úÖ Dane techniczne (wymiary, rok, strony) TYLKO w ≈õrodkowej/dolnej czƒô≈õci opisu
   ‚úÖ NIGDY nie powtarzaj tych samych informacji (sprawd≈∫ przed wys≈Çaniem!)
   ‚úÖ Opis marketingowy - emocje, korzy≈õci, storytelling
   ‚úÖ Wpleƒá dane techniczne NATURALNIE w zdania
   ‚ùå NIGDY nie tw√≥rz list punktowanych z danymi technicznymi
   ‚ùå NIGDY nie powtarzaj ISBN, EAN, kod√≥w produktu w tre≈õci

5. OPTYMALIZACJA SEO (SEMANTYCZNA):
   ‚úÖ U≈ºywaj synonim√≥w i powiƒÖzanych fraz
   ‚úÖ Naturalne wplecenie s≈Ç√≥w kluczowych (bez keyword stuffing)
   ‚úÖ D≈Çugie frazy (long-tail keywords) w naturalnym kontek≈õcie
   ‚úÖ Pytania, kt√≥re mogƒÖ zadawaƒá klienci

6. D≈ÅUGO≈öƒÜ:
   ‚úÖ 1500-2500 znak√≥w (ze spacjami)
   ‚úÖ Akapity po 3-4 zdania (nie d≈Çu≈ºsze!)

7. TON I STYL - dostosuj automatycznie:
   - Krymina≈Ç: napiƒôcie, tajemnica, intrygujƒÖce pytania
   - Fantasy: magiczny ≈õwiat, epicka przygoda
   - Edukacja: korzy≈õci rozwojowe, bezpiecze≈Ñstwo, rado≈õƒá nauki
   - Gra planszowa: emocje, interakcja, zasady w akcji

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ANTI-PRZYK≈ÅADY (CZEGO NIE ROBIƒÜ!)                                ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

‚ùå Z≈ÅE: "KsiƒÖ≈ºka ma wymiary 20x15 cm i 320 stron. Wymiary: 20x15 cm."
‚úÖ DOBRE: "Format ksiƒÖ≈ºki (20x15 cm) idealnie pasuje do plecaka..."

‚ùå Z≈ÅE: "Produkt o <b>wysokiej jako≈õci wykonania oraz doskona≈Çej...</b>" (ca≈Çe zdanie)
‚úÖ DOBRE: "Produkt wyr√≥≈ºnia siƒô <b>wysokƒÖ jako≈õciƒÖ</b> wykonania..."

‚ùå Z≈ÅE: "To ksiƒÖ≈ºka ‚Äî idealna na prezent ‚Äî dla ka≈ºdego." (em dash)
‚úÖ DOBRE: "To ksiƒÖ≈ºka - idealna na prezent - dla ka≈ºdego."

‚ùå Z≈ÅE: Brak H2 na poczƒÖtku
‚úÖ DOBRE: Zawsze H2 jako pierwszy element

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  TWOJA ODPOWIED≈π                                                   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

Zwr√≥ƒá TYLKO czysty kod HTML (bez ```html, bez komentarzy).
Zacznij od <h2>, zako≈Ñcz na </p>.
Sprawd≈∫ PRZED wys≈Çaniem: brak powt√≥rze≈Ñ, brak em dash, odpowiednia liczba bold, H2 na poczƒÖtku.
"""

        # Warianty stylistyczne
        style_additions = {
            "alternative": "\n\nU≈ºyj ALTERNATYWNEGO PODEJ≈öCIA: bardziej bezpo≈õredniego tonu, kr√≥tszych zda≈Ñ i mocniejszych CTA.",
            "concise": "\n\nU≈ºyj ZWIƒòZ≈ÅEGO STYLU: kr√≥tkie zdania, maksimum informacji, minimum ozdobnik√≥w. Celuj w 1500-1800 znak√≥w.",
            "detailed": "\n\nU≈ºyj SZCZEG√ì≈ÅOWEGO STYLU: rozbudowane opisy, wiƒôcej kontekstu, storytelling. Celuj w 2200-2500 znak√≥w."
        }
        
        if style_variant != "default" and style_variant in style_additions:
            system_prompt += style_additions[style_variant]

        raw_data_context = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  DANE PRODUKTU DO PRZEANALIZOWANIA                                ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

TYTU≈Å PRODUKTU:
{product_data.get('title', '')}

SZCZEG√ì≈ÅY TECHNICZNE (do wplecenia naturalnie w ≈õrodkowej czƒô≈õci opisu):
{product_data.get('details', '')}

ORYGINALNY OPIS (g≈Ç√≥wne ≈∫r√≥d≈Ço tre≈õci marketingowej):
{product_data.get('description', '')}

PAMIƒòTAJ:
- Przeanalizuj produkt i dostosuj ton
- Zacznij od <h2>
- 6-10 wyraz√≥w/fraz bold (2-4 s≈Çowa)
- Dane techniczne w ≈õrodku/na ko≈Ñcu, wplecione naturalnie
- NIE powtarzaj informacji
- TYLKO my≈õlniki "-", NIGDY em dash "‚Äî"
"""
        full_input = f"{system_prompt}\n\n{raw_data_context}"

        response = client.responses.create(
            model="gpt-5-nano",
            input=full_input,
            reasoning={"effort": "high"},
            text={"verbosity": "medium"}
        )
        
        result = strip_code_fences(response.output_text)
        result = clean_ai_fingerprints(result)
        
        return result
        
    except Exception as e:
        return f"B≈ÅƒÑD GENEROWANIA: {str(e)}"

def generate_meta_tags(product_data: Dict, client: OpenAI) -> Tuple[str, str]:
    """Generuje meta title i meta description"""
    try:
        title = product_data.get('title', '')
        details = product_data.get('details', '')
        description = product_data.get('description', '')
        
        system_prompt = """Jeste≈õ ekspertem SEO i copywriterem metatag√≥w.

KRYTYCZNE ZASADY:

Meta Title:
- Maksymalnie 60 znak√≥w
- Rozpocznij od g≈Ç√≥wnego s≈Çowa kluczowego
- NIE dodawaj nazwy sklepu
- U≈ºywaj TYLKO standardowego my≈õlnika "-"
- NIGDY nie u≈ºywaj em dash "‚Äî" ani en dash "‚Äì"
- NIE u≈ºywaj kropek na ko≈Ñcu

Meta Description:
- Maksymalnie 160 znak√≥w
- Jedno lub dwa konkretne zdania
- Zawiera wezwanie do dzia≈Çania
- U≈ºywaj TYLKO standardowego my≈õlnika "-"

FORMAT ODPOWIEDZI (DOK≈ÅADNIE):
Meta title: [tre≈õƒá]
Meta description: [tre≈õƒá]
"""
        
        user_prompt = f"""Produkt: {title}
Dane: {details} {description}

Wygeneruj metatagi SEO."""

        response = client.responses.create(
            model="gpt-5-nano",
            input=f"{system_prompt}\n\n{user_prompt}",
            reasoning={"effort": "medium"},
            text={"verbosity": "low"}
        )
        
        result = response.output_text
        meta_title = ""
        meta_description = ""
        
        for line in result.splitlines():
            line = line.strip()
            if line.lower().startswith("meta title:"):
                meta_title = line[len("meta title:"):].strip()
            elif line.lower().startswith("meta description:"):
                meta_description = line[len("meta description:"):].strip()
        
        # Post-processing
        meta_title = clean_ai_fingerprints(meta_title).rstrip('.')
        meta_description = clean_ai_fingerprints(meta_description)
        
        # Walidacja d≈Çugo≈õci
        if len(meta_title) > 60:
            meta_title = meta_title[:57] + "..."
        if len(meta_description) > 160:
            meta_description = meta_description[:157] + "..."
            
        return meta_title, meta_description
        
    except Exception as e:
        st.error(f"B≈ÇƒÖd generowania metatag√≥w: {str(e)}")
        return "", ""

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# PRZETWARZANIE WSADOWE
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def process_single_url(url: str, sku: str, client: OpenAI) -> Dict:
    """Przetwarza pojedynczy URL w trybie wsadowym"""
    try:
        product_data = get_book_data(url)
        if product_data['error']:
            return {
                'url': url,
                'sku': sku,
                'title': product_data.get('title', ''),
                'description_html': '',
                'error': product_data['error']
            }
            
        description_html = generate_description(product_data, client)
        
        if "B≈ÅƒÑD GENEROWANIA:" in description_html:
            return {
                'url': url,
                'sku': sku,
                'title': product_data.get('title', ''),
                'description_html': '',
                'error': description_html
            }
            
        return {
            'url': url,
            'sku': sku,
            'title': product_data.get('title', ''),
            'description_html': description_html,
            'error': None
        }
        
    except Exception as e:
        return {
            'url': url,
            'sku': sku,
            'title': '',
            'description_html': '',
            'error': f"Nieoczekiwany b≈ÇƒÖd: {str(e)}"
        }

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# INICJALIZACJA I WALIDACJA
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

# Session state
if 'show_preview' not in st.session_state:
    st.session_state.show_preview = False
if 'batch_results' not in st.session_state:
    st.session_state.batch_results = []
if 'regeneration_count' not in st.session_state:
    st.session_state.regeneration_count = 0
if 'akeneo_search_results' not in st.session_state:
    st.session_state.akeneo_search_results = []
if 'selected_product_from_akeneo' not in st.session_state:
    st.session_state.selected_product_from_akeneo = None

# Walidacja API keys
if "OPENAI_API_KEY" not in st.secrets:
    st.error("‚ùå Brak klucza API OpenAI w secrets. Skonfiguruj OPENAI_API_KEY.")
    st.stop()

required_akeneo_secrets = [
    "AKENEO_BASE_URL",
    "AKENEO_CLIENT_ID",
    "AKENEO_SECRET",
    "AKENEO_USERNAME",
    "AKENEO_PASSWORD"
]
missing = [k for k in required_akeneo_secrets if k not in st.secrets]
if missing:
    st.warning(f"‚ö†Ô∏è Brak konfiguracji Akeneo: {', '.join(missing)}. Funkcje PIM bƒôdƒÖ niedostƒôpne.")

client = OpenAI()

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# INTERFEJS U≈ªYTKOWNIKA
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

st.title('üìö Generator Opis√≥w Produkt√≥w v2.0')
st.caption("‚ú® Nowy prompt z optymalizacjƒÖ SEO | üîç Nowy tryb: Wyszukiwanie w Akeneo PIM")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# SIDEBAR - USTAWIENIA
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

st.sidebar.header("üéØ Ustawienia PIM")
channel = st.sidebar.selectbox(
    "Kana≈Ç (scope):",
    ["Bookland", "B2B"],
    index=0,
    key="channel_global"
)
locale = st.sidebar.text_input(
    "Locale:",
    value=st.secrets.get("AKENEO_DEFAULT_LOCALE", "pl_PL"),
    key="locale_global"
)

st.sidebar.markdown("---")
st.sidebar.header("‚ÑπÔ∏è Informacje")
st.sidebar.info("""
**Dostƒôpne tryby:**
1. üåê Ze strony zewnƒôtrznej
2. üîç Wyszukaj w Akeneo
3. üóÇÔ∏è Przetwarzanie wsadowe

**Warianty stylistyczne:**
- default: standardowy
- alternative: bezpo≈õredni
- concise: zwiƒôz≈Çy
- detailed: szczeg√≥≈Çowy
""")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ZAK≈ÅADKI G≈Å√ìWNE
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

tab1, tab2, tab3 = st.tabs([
    "üåê Ze strony zewnƒôtrznej",
    "üîç Wyszukaj w Akeneo",
    "üóÇÔ∏è Przetwarzanie wsadowe"
])

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# ZAK≈ÅADKA 1: ZE STRONY ZEWNƒòTRZNEJ (URL)
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

with tab1:
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.header("üìù Dane wej≈õciowe")
        
        url_single = st.text_input(
            "URL strony produktu:",
            placeholder="https://przyklad.com/produkt",
            key="url_single"
        )
        
        sku_single = st.text_input(
            "SKU w PIM (identifier):",
            placeholder="np. BL-12345",
            key="sku_single"
        )
        
        style_variant = st.selectbox(
            "Wariant stylistyczny:",
            ["default", "alternative", "concise", "detailed"],
            index=0,
            help="Wybierz styl opisu",
            key="style_variant_url"
        )
        
        generate_meta = st.checkbox(
            "Generuj meta title i meta description",
            value=False,
            key="meta_single_url"
        )
        
        col_btn1, col_btn2 = st.columns([1, 1])
        
        with col_btn1:
            generate_button = st.button(
                "üöÄ Generuj opis",
                type="primary",
                use_container_width=True,
                key="gen_single_url"
            )
        
        with col_btn2:
            if st.button("üîÑ Wyczy≈õƒá", use_container_width=True, key="clear_single_url"):
                keys_to_clear = [
                    'generated_description',
                    'book_title',
                    'meta_title',
                    'meta_description',
                    'show_preview',
                    'book_data_cached',
                    'regeneration_count'
                ]
                for key in keys_to_clear:
                    if key in st.session_state:
                        del st.session_state[key]
                st.rerun()

        if generate_button:
            if not url_single:
                st.error("‚ùå Podaj URL strony produktu!")
            else:
                with st.spinner("Pobieram dane ze strony..."):
                    book_data = get_book_data(url_single)
                
                if book_data['error']:
                    st.error(f"‚ùå {book_data['error']}")
                else:
                    st.success("‚úÖ Dane pobrane pomy≈õlnie!")
                    st.session_state['book_data_cached'] = book_data
                    st.session_state.regeneration_count = 0
                    
                    with st.spinner("Generujƒô opis..."):
                        generated_desc = generate_description(book_data, client, style_variant)
                        
                        if "B≈ÅƒÑD GENEROWANIA:" not in generated_desc:
                            st.session_state['generated_description'] = generated_desc
                            st.session_state['book_title'] = book_data['title']
                            st.session_state.show_preview = False
                            
                            if generate_meta:
                                with st.spinner("Generujƒô metatagi..."):
                                    meta_title, meta_description = generate_meta_tags(book_data, client)
                                    st.session_state['meta_title'] = meta_title
                                    st.session_state['meta_description'] = meta_description

                            st.success("‚úÖ Opis wygenerowany!")
                        else:
                            st.error(f"‚ùå {generated_desc}")

    with col2:
        st.header("üìÑ Wygenerowany opis")
        
        if 'generated_description' in st.session_state:
            st.subheader(f"üìñ {st.session_state.get('book_title', 'Opis produktu')}")
            
            if st.session_state.regeneration_count > 0:
                st.caption(f"‚ôªÔ∏è Regenerowano: {st.session_state.regeneration_count} raz(y)")
            
            st.code(st.session_state['generated_description'], language='html')

            col_preview, col_regen = st.columns([1, 1])
            
            with col_preview:
                if st.button(
                    "üëÅÔ∏è Poka≈º/Ukryj podglƒÖd",
                    use_container_width=True,
                    key="preview_single_url"
                ):
                    st.session_state.show_preview = not st.session_state.show_preview
            
            with col_regen:
                if st.button(
                    "‚ôªÔ∏è Przeredaguj",
                    use_container_width=True,
                    help="Wygeneruj nowƒÖ wersjƒô",
                    key="regen_single_url"
                ):
                    if 'book_data_cached' in st.session_state:
                        with st.spinner("Przeredagowujƒô..."):
                            import random
                            variants = ["default", "alternative", "concise", "detailed"]
                            random_variant = random.choice(variants)
                            
                            generated_desc = generate_description(
                                st.session_state['book_data_cached'],
                                client,
                                random_variant
                            )
                            
                            if "B≈ÅƒÑD GENEROWANIA:" not in generated_desc:
                                st.session_state['generated_description'] = generated_desc
                                st.session_state.regeneration_count += 1
                                st.success(f"‚úÖ Przeredagowano! (wariant: {random_variant})")
                                st.rerun()
                            else:
                                st.error(f"‚ùå {generated_desc}")
                    else:
                        st.warning("‚ö†Ô∏è Brak danych do regeneracji.")
            
            if st.session_state.show_preview:
                st.markdown("**PodglƒÖd:**")
                st.markdown(st.session_state['generated_description'], unsafe_allow_html=True)

            if 'meta_title' in st.session_state:
                st.markdown("---")
                st.subheader("üè∑Ô∏è Metatagi SEO")
                
                title_len = len(st.session_state['meta_title'])
                desc_len = len(st.session_state['meta_description'])
                
                title_color = "green" if title_len <= 60 else "red"
                desc_color = "green" if desc_len <= 160 else "red"
                
                st.markdown(f"**Meta Title** (:{title_color}[{title_len}/60]): {st.session_state['meta_title']}")
                st.markdown(f"**Meta Description** (:{desc_color}[{desc_len}/160]): {st.session_state['meta_description']}")
            
            st.markdown("---")
            pim_disabled = len(missing) > 0
            
            if st.button(
                "‚úÖ Zaakceptuj i wy≈õlij do PIM",
                use_container_width=True,
                type="primary",
                disabled=pim_disabled,
                key="send_pim_single_url"
            ):
                if not sku_single:
                    st.error("‚ùå Podaj SKU przed wysy≈ÇkƒÖ do PIM.")
                else:
                    try:
                        with st.spinner("Wysy≈Çam do Akeneo..."):
                            ok = akeneo_update_description(
                                sku_single.strip(),
                                st.session_state['generated_description'],
                                channel,
                                locale.strip()
                            )
                            if ok:
                                st.success(f"‚úÖ Opis zapisany dla SKU: {sku_single}")
                    except Exception as e:
                        st.error(f"‚ùå B≈ÇƒÖd zapisu: {e}")
        else:
            st.info("üëà Podaj URL i kliknij 'Generuj opis'")

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# ZAK≈ÅADKA 2: WYSZUKIWANIE W AKENEO (NOWA!)
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

with tab2:
    st.header("üîç Wyszukaj produkt w Akeneo PIM")
    st.info("Wyszukaj produkt bezpo≈õrednio w Akeneo, wybierz z listy i wygeneruj nowy opis na podstawie danych z PIM.")
    
    if len(missing) > 0:
        st.error(f"‚ùå Brak konfiguracji Akeneo. Skonfiguruj: {', '.join(missing)}")
    else:
        col_search, col_results = st.columns([1, 1])
        
        with col_search:
            st.subheader("üîé Wyszukiwanie")
            
            search_query = st.text_input(
                "Wpisz nazwƒô, tytu≈Ç lub identyfikator produktu:",
                placeholder="np. Harry Potter",
                key="akeneo_search_query"
            )
            
            search_limit = st.slider(
                "Maksymalna liczba wynik√≥w:",
                min_value=5,
                max_value=50,
                value=20,
                key="akeneo_search_limit"
            )
            
            if st.button("üîç Szukaj w Akeneo", type="primary", use_container_width=True, key="btn_search_akeneo"):
                if not search_query:
                    st.warning("‚ö†Ô∏è Wpisz frazƒô do wyszukania.")
                else:
                    with st.spinner(f"Wyszukujƒô '{search_query}' w Akeneo..."):
                        try:
                            token = akeneo_get_token()
                            results = akeneo_search_products(search_query, token, search_limit)
                            st.session_state.akeneo_search_results = results
                            
                            if results:
                                st.success(f"‚úÖ Znaleziono {len(results)} produkt√≥w!")
                            else:
                                st.warning("‚ö†Ô∏è Nie znaleziono produkt√≥w pasujƒÖcych do zapytania.")
                        except Exception as e:
                            st.error(f"‚ùå B≈ÇƒÖd wyszukiwania: {str(e)}")
            
            if st.button("üóëÔ∏è Wyczy≈õƒá wyniki", use_container_width=True, key="clear_akeneo_search"):
                st.session_state.akeneo_search_results = []
                st.session_state.selected_product_from_akeneo = None
                st.rerun()
        
        with col_results:
            st.subheader("üìã Wyniki wyszukiwania")
            
            if st.session_state.akeneo_search_results:
                st.write(f"Znaleziono **{len(st.session_state.akeneo_search_results)}** produkt√≥w:")
                
                # Tworzymy opcje selectbox
                product_options = {}
                for prod in st.session_state.akeneo_search_results:
                    display_name = f"{prod['identifier']} - {format_product_title(prod['title'])}"
                    if not prod['enabled']:
                        display_name += " [WY≈ÅƒÑCZONY]"
                    product_options[display_name] = prod
                
                selected_display = st.selectbox(
                    "Wybierz produkt:",
                    options=list(product_options.keys()),
                    key="akeneo_product_selector"
                )
                
                if selected_display:
                    selected_product = product_options[selected_display]
                    st.session_state.selected_product_from_akeneo = selected_product
                    
                    # Wy≈õwietlamy info o produkcie
                    st.markdown("---")
                    st.write(f"**Identyfikator:** {selected_product['identifier']}")
                    st.write(f"**Tytu≈Ç:** {selected_product['title']}")
                    st.write(f"**Rodzina:** {selected_product['family']}")
                    st.write(f"**Status:** {'‚úÖ Aktywny' if selected_product['enabled'] else '‚ùå Wy≈ÇƒÖczony'}")
            else:
                st.info("üëà Wyszukaj produkt aby zobaczyƒá wyniki")
        
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        # SEKCJA GENEROWANIA OPISU DLA WYBRANEGO PRODUKTU
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        
        if st.session_state.selected_product_from_akeneo:
            st.markdown("---")
            st.header("‚ú® Generowanie nowego opisu")
            
            col_gen1, col_gen2 = st.columns([1, 1])
            
            with col_gen1:
                st.subheader("‚öôÔ∏è Opcje generowania")
                
                selected_sku = st.session_state.selected_product_from_akeneo['identifier']
                st.text_input(
                    "SKU produktu:",
                    value=selected_sku,
                    disabled=True,
                    key="akeneo_selected_sku_display"
                )
                
                style_variant_akeneo = st.selectbox(
                    "Wariant stylistyczny:",
                    ["default", "alternative", "concise", "detailed"],
                    index=0,
                    key="style_variant_akeneo"
                )
                
                generate_meta_akeneo = st.checkbox(
                    "Generuj meta title i meta description",
                    value=False,
                    key="meta_akeneo"
                )
                
                if st.button(
                    "üöÄ Pobierz dane i generuj opis",
                    type="primary",
                    use_container_width=True,
                    key="gen_from_akeneo"
                ):
                    with st.spinner("Pobieram pe≈Çne dane produktu z Akeneo..."):
                        try:
                            token = akeneo_get_token()
                            product_details = akeneo_get_product_details(
                                selected_sku,
                                token,
                                channel,
                                locale
                            )
                            
                            if not product_details:
                                st.error("‚ùå Nie znaleziono produktu w Akeneo.")
                            else:
                                st.success("‚úÖ Dane produktu pobrane!")
                                
                                # Przygotowujemy dane do generowania
                                # ≈ÅƒÖczymy wszystkie dostƒôpne informacje
                                details_parts = []
                                
                                if product_details.get('author'):
                                    details_parts.append(f"Autor: {product_details['author']}")
                                if product_details.get('publisher'):
                                    details_parts.append(f"Wydawnictwo: {product_details['publisher']}")
                                if product_details.get('year'):
                                    details_parts.append(f"Rok wydania: {product_details['year']}")
                                if product_details.get('pages'):
                                    details_parts.append(f"Liczba stron: {product_details['pages']}")
                                if product_details.get('cover_type'):
                                    details_parts.append(f"Oprawa: {product_details['cover_type']}")
                                if product_details.get('dimensions'):
                                    details_parts.append(f"Wymiary: {product_details['dimensions']}")
                                if product_details.get('age'):
                                    details_parts.append(f"Wiek: {product_details['age']}")
                                if product_details.get('category'):
                                    details_parts.append(f"Kategoria: {product_details['category']}")
                                
                                product_data_for_gen = {
                                    'title': product_details['title'],
                                    'details': '\n'.join(details_parts),
                                    'description': product_details.get('description', '') or product_details.get('short_description', ''),
                                    'error': None
                                }
                                
                                # Cache'ujemy dane
                                st.session_state['akeneo_product_data_cached'] = product_data_for_gen
                                st.session_state['akeneo_product_details'] = product_details
                                st.session_state.regeneration_count_akeneo = 0
                                
                                with st.spinner("Generujƒô nowy opis..."):
                                    generated_desc = generate_description(
                                        product_data_for_gen,
                                        client,
                                        style_variant_akeneo
                                    )
                                    
                                    if "B≈ÅƒÑD GENEROWANIA:" not in generated_desc:
                                        st.session_state['generated_description_akeneo'] = generated_desc
                                        st.session_state.show_preview_akeneo = False
                                        
                                        if generate_meta_akeneo:
                                            with st.spinner("Generujƒô metatagi..."):
                                                meta_title, meta_description = generate_meta_tags(
                                                    product_data_for_gen,
                                                    client
                                                )
                                                st.session_state['meta_title_akeneo'] = meta_title
                                                st.session_state['meta_description_akeneo'] = meta_description
                                        
                                        st.success("‚úÖ Nowy opis wygenerowany!")
                                        st.rerun()
                                    else:
                                        st.error(f"‚ùå {generated_desc}")
                                        
                        except Exception as e:
                            st.error(f"‚ùå B≈ÇƒÖd: {str(e)}")
            
            with col_gen2:
                st.subheader("üìä Obecne dane w Akeneo")
                
                if 'akeneo_product_details' in st.session_state:
                    details = st.session_state['akeneo_product_details']
                    
                    with st.expander("üîç Zobacz szczeg√≥≈Çy produktu", expanded=False):
                        if details.get('description'):
                            st.markdown("**Obecny opis:**")
                            st.markdown(details['description'][:500] + "..." if len(details.get('description', '')) > 500 else details.get('description', ''))
                        
                        if details.get('short_description'):
                            st.markdown("**Kr√≥tki opis:**")
                            st.write(details['short_description'])
                        
                        st.markdown("**Atrybuty:**")
                        attr_display = []
                        for key in ['author', 'publisher', 'year', 'pages', 'cover_type', 'dimensions', 'age', 'category', 'ean', 'isbn']:
                            if details.get(key):
                                attr_display.append(f"- **{key.title()}:** {details[key]}")
                        
                        if attr_display:
                            st.markdown('\n'.join(attr_display))
                else:
                    st.info("Kliknij 'Pobierz dane i generuj opis' aby zobaczyƒá obecne dane")
            
            # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            # WY≈öWIETLANIE WYGENEROWANEGO OPISU
            # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            
            if 'generated_description_akeneo' in st.session_state:
                st.markdown("---")
                st.header("üìÑ Nowy wygenerowany opis")
                
                col_desc1, col_desc2 = st.columns([3, 2])
                
                with col_desc1:
                    if hasattr(st.session_state, 'regeneration_count_akeneo') and st.session_state.regeneration_count_akeneo > 0:
                        st.caption(f"‚ôªÔ∏è Regenerowano: {st.session_state.regeneration_count_akeneo} raz(y)")
                    
                    st.code(st.session_state['generated_description_akeneo'], language='html')
                
                with col_desc2:
                    if st.button(
                        "üëÅÔ∏è Poka≈º/Ukryj podglƒÖd",
                        use_container_width=True,
                        key="preview_akeneo"
                    ):
                        st.session_state.show_preview_akeneo = not st.session_state.get('show_preview_akeneo', False)
                    
                    if st.button(
                        "‚ôªÔ∏è Przeredaguj",
                        use_container_width=True,
                        key="regen_akeneo"
                    ):
                        if 'akeneo_product_data_cached' in st.session_state:
                            with st.spinner("Przeredagowujƒô..."):
                                import random
                                variants = ["default", "alternative", "concise", "detailed"]
                                random_variant = random.choice(variants)
                                
                                generated_desc = generate_description(
                                    st.session_state['akeneo_product_data_cached'],
                                    client,
                                    random_variant
                                )
                                
                                if "B≈ÅƒÑD GENEROWANIA:" not in generated_desc:
                                    st.session_state['generated_description_akeneo'] = generated_desc
                                    st.session_state.regeneration_count_akeneo = st.session_state.get('regeneration_count_akeneo', 0) + 1
                                    st.success(f"‚úÖ Przeredagowano! (wariant: {random_variant})")
                                    st.rerun()
                                else:
                                    st.error(f"‚ùå {generated_desc}")
                
                if st.session_state.get('show_preview_akeneo', False):
                    st.markdown("**PodglƒÖd:**")
                    st.markdown(st.session_state['generated_description_akeneo'], unsafe_allow_html=True)
                
                # Por√≥wnanie starych i nowych opis√≥w
                if 'akeneo_product_details' in st.session_state:
                    old_desc = st.session_state['akeneo_product_details'].get('description', '')
                    if old_desc:
                        with st.expander("üìä Por√≥wnanie: Stary vs Nowy opis"):
                            col_old, col_new = st.columns(2)
                            with col_old:
                                st.markdown("**Stary opis (Akeneo):**")
                                st.markdown(f"*D≈Çugo≈õƒá: {len(old_desc)} znak√≥w*")
                                st.markdown(old_desc[:500] + "..." if len(old_desc) > 500 else old_desc, unsafe_allow_html=True)
                            with col_new:
                                st.markdown("**Nowy opis (AI):**")
                                new_desc = st.session_state['generated_description_akeneo']
                                st.markdown(f"*D≈Çugo≈õƒá: {len(new_desc)} znak√≥w*")
                                st.markdown(new_desc, unsafe_allow_html=True)
                
                # Metatagi
                if 'meta_title_akeneo' in st.session_state:
                    st.markdown("---")
                    st.subheader("üè∑Ô∏è Metatagi SEO")
                    
                    title_len = len(st.session_state['meta_title_akeneo'])
                    desc_len = len(st.session_state['meta_description_akeneo'])
                    
                    title_color = "green" if title_len <= 60 else "red"
                    desc_color = "green" if desc_len <= 160 else "red"
                    
                    st.markdown(f"**Meta Title** (:{title_color}[{title_len}/60]): {st.session_state['meta_title_akeneo']}")
                    st.markdown(f"**Meta Description** (:{desc_color}[{desc_len}/160]): {st.session_state['meta_description_akeneo']}")
                
                # Przycisk wysy≈Çki
                st.markdown("---")
                if st.button(
                    "‚úÖ Zaakceptuj i zaktualizuj w PIM",
                    use_container_width=True,
                    type="primary",
                    key="send_pim_akeneo"
                ):
                    try:
                        with st.spinner("Aktualizujƒô produkt w Akeneo..."):
                            ok = akeneo_update_description(
                                selected_sku,
                                st.session_state['generated_description_akeneo'],
                                channel,
                                locale
                            )
                            if ok:
                                st.success(f"‚úÖ Opis zaktualizowany dla SKU: {selected_sku}")
                                st.balloons()
                    except Exception as e:
                        st.error(f"‚ùå B≈ÇƒÖd aktualizacji: {e}")

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# ZAK≈ÅADKA 3: PRZETWARZANIE WSADOWE
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

with tab3:
    st.header("üöÄ Przetwarzanie wielu produkt√≥w jednocze≈õnie")
    st.info("Wklej linki URL i odpowiadajƒÖce im SKU, ka≈ºdy w nowej linii. Kolejno≈õƒá musi byƒá identyczna.")
    
    col_urls, col_skus = st.columns(2)
    
    with col_urls:
        urls_batch = st.text_area(
            "Linki do produkt√≥w (jeden na liniƒô)",
            height=250,
            placeholder="https://.../produkt1\nhttps://.../produkt2",
            key="urls_batch"
        )
    
    with col_skus:
        skus_batch = st.text_area(
            "Kody SKU (jeden na liniƒô)",
            height=250,
            placeholder="SKU-001\nSKU-002",
            key="skus_batch"
        )
    
    col_b1, col_b2 = st.columns(2)
    
    with col_b1:
        if st.button(
            "üöÄ Rozpocznij generowanie wsadowe",
            type="primary",
            use_container_width=True,
            key="gen_batch"
        ):
            urls = [url.strip() for url in urls_batch.splitlines() if url.strip()]
            skus = [sku.strip() for sku in skus_batch.splitlines() if sku.strip()]
            
            if not urls:
                st.warning("‚ö†Ô∏è Podaj przynajmniej jeden URL.")
            elif len(urls) != len(skus):
                st.error(f"‚ùå Niezgodna liczba link√≥w ({len(urls)}) i SKU ({len(skus)}).")
            else:
                st.session_state.batch_results = []
                data_to_process = list(zip(urls, skus))
                progress_bar = st.progress(0, text="Rozpoczynam...")
                
                with ThreadPoolExecutor(max_workers=5) as executor:
                    future_to_data = {
                        executor.submit(process_single_url, url, sku, client): (url, sku)
                        for url, sku in data_to_process
                    }
                    results_temp = []
                    
                    for i, future in enumerate(as_completed(future_to_data)):
                        result = future.result()
                        results_temp.append(result)
                        progress_bar.progress(
                            (i + 1) / len(data_to_process),
                            text=f"Przetworzono {i+1}/{len(data_to_process)}"
                        )
                
                st.session_state.batch_results = sorted(
                    results_temp,
                    key=lambda x: urls.index(x['url'])
                )
                progress_bar.progress(1.0, text="Zako≈Ñczono!")
    
    with col_b2:
        if st.button("üóëÔ∏è Wyczy≈õƒá wyniki", use_container_width=True, key="clear_batch"):
            st.session_state.batch_results = []
            st.rerun()

    # Wy≈õwietlanie wynik√≥w
    if st.session_state.batch_results:
        st.markdown("---")
        st.subheader("üìä Wyniki generowania")

        results = st.session_state.batch_results
        successful_results = [r for r in results if r['error'] is None]
        error_count = len(results) - len(successful_results)
        
        c1, c2, c3 = st.columns(3)
        c1.metric("Liczba link√≥w", len(results))
        c2.metric("Wygenerowano pomy≈õlnie", len(successful_results))
        c3.metric("B≈Çƒôdy", error_count)
        
        df = pd.DataFrame(results)
        st.download_button(
            "üì• Pobierz wyniki jako CSV",
            df.to_csv(index=False).encode('utf-8'),
            'wygenerowane_opisy.csv',
            'text/csv'
        )
        
        pim_disabled_batch = len(missing) > 0 or not successful_results
        
        if st.button(
            "‚úÖ Wy≈õlij wszystkie pomy≈õlne do PIM",
            type="primary",
            use_container_width=True,
            disabled=pim_disabled_batch,
            key="send_batch_pim"
        ):
            success_pim_count = 0
            error_pim_count = 0
            error_messages = []
            
            progress_bar_pim = st.progress(0, text="Rozpoczynam wysy≈Çanie...")
            
            with st.spinner("Aktualizowanie produkt√≥w w PIM..."):
                for i, result in enumerate(successful_results):
                    sku = result['sku']
                    html = result['description_html']
                    progress_bar_pim.progress(
                        (i + 1) / len(successful_results),
                        text=f"Wysy≈Çam SKU: {sku} ({i+1}/{len(successful_results)})"
                    )
                    
                    try:
                        akeneo_update_description(sku, html, channel, locale)
                        success_pim_count += 1
                    except Exception as e:
                        error_pim_count += 1
                        error_messages.append(f"**SKU {sku}:** {e}")
            
            st.success(f"‚úÖ Zaktualizowano **{success_pim_count}** produkt√≥w.")
            
            if error_pim_count > 0:
                st.error(f"‚ùå B≈Çƒôdy podczas aktualizacji **{error_pim_count}** produkt√≥w:")
                for msg in error_messages:
                    st.markdown(f"- {msg}")

        # Ekspandery z wynikami
        for result in results:
            if result['error']:
                with st.expander(f"‚ùå B≈ÇƒÖd: {result['url']}", expanded=False):
                    st.error(result['error'])
                    st.write(f"**SKU:** {result['sku']}")
            else:
                with st.expander(f"‚úÖ {result['title'] or result['url']}"):
                    st.write(f"**URL:** {result['url']}")
                    st.write(f"**SKU:** {result['sku']}")
                    st.code(result['description_html'], language='html')

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# STOPKA
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666; padding: 20px;'>
    <p><strong>Generator Opis√≥w Produkt√≥w v2.0</strong></p>
    <p>Powered by OpenAI GPT-5-nano | Built with Streamlit | Integrated with Akeneo PIM</p>
    <p>üÜï Nowy tryb: Wyszukiwanie produkt√≥w w Akeneo</p>
</div>
""", unsafe_allow_html=True)
